name: Ultra-Ultra-Fast Java CI (All-in-One)

on:
  push:
    branches: [ "main", "develop", "master" ]
  pull_request:
    branches: [ "main", "develop", "master" ]

jobs:
  all_in_one:
    runs-on: ubuntu-latest
    steps:
      # -------------------------------------------------------------------
      # Step 1: Checkout repository
      # -------------------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for Gradle & GitLeaks

      # -------------------------------------------------------------------
      # Step 2: Setup Java 21
      # -------------------------------------------------------------------
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # -------------------------------------------------------------------
      # Step 3: Cache Gradle dependencies
      # -------------------------------------------------------------------
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # -------------------------------------------------------------------
      # Step 4: Run Gradle tasks (build + lint + tests + coverage)
      # -------------------------------------------------------------------
      - name: Gradle Build, Lint, Test, Coverage
        env:
          SPRING_PROFILES_ACTIVE: ci  # Use CI profile with H2 in-memory database
        run: |
          cd backend
          ./gradlew build checkstyleMain checkstyleTest test jacocoTestReport --no-daemon --warning-mode all

      # -------------------------------------------------------------------
      # Step 5: Upload test reports
      # -------------------------------------------------------------------
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: backend/build/reports/tests/test
          if-no-files-found: warn

      # -------------------------------------------------------------------
      # Step 6: Upload JaCoCo coverage reports
      # -------------------------------------------------------------------
      - name: Upload JaCoCo coverage
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: backend/build/reports/jacoco/test/
          if-no-files-found: warn

      # -------------------------------------------------------------------
      # Step 7: Upload coverage to Codecov
      # -------------------------------------------------------------------
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: backend/build/reports/jacoco/test/jacocoTestReport.xml
          flags: unittests
          name: codecov-news-platform

      # -------------------------------------------------------------------
      # Step 8: Run GitLeaks for secrets detection
      # -------------------------------------------------------------------
      - name: Run GitLeaks scan
        run: |
          curl -sL https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz | tar xz
          ./gitleaks detect --source . --verbose --redact

      # -------------------------------------------------------------------
      # Step 9: Upload GitLeaks report if scan fails
      # -------------------------------------------------------------------
      - name: Upload GitLeaks results (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: .gitleaks-report.json

      # -------------------------------------------------------------------
      # Step 10: Run Qodana static analysis (Spring Boot/JVM project)
      # -------------------------------------------------------------------
      - name: Run Qodana Scan (JVM)
        uses: JetBrains/qodana-action@v2025.1
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_1954113934 }}
        with:
          # Pass JVM options and timeout via args instead of "settings" in yaml
          args: >
            --jvm-options "-Xmx1024m"
            --timeout 120
          post-pr-comment: true        # Adds summary as PR comment
          use-annotations: true        # Adds inline annotations in PR diffs
          upload-result: true          # Uploads results to Qodana Cloud

      # -------------------------------------------------------------------
      # Step 11: Upload Qodana SARIF report to GitHub Security (Code scanning)
      # -------------------------------------------------------------------
      - name: Upload Qodana report to GitHub code scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: qodana/results/qodana.sarif.json