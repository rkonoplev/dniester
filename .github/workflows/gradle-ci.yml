name: Optimized Hybrid Java CI with Gradle, GitLeaks and Qodana

on:
  push:
    branches: [ "main", "develop", "master" ]
  pull_request:
    branches: [ "main", "develop", "master" ]

jobs:
  # ===================================================================
  # JOB 1: Setup (checkout + Java + Gradle cache + source upload)
  # ===================================================================
  setup:
    runs-on: ubuntu-latest
    steps:
      # Checkout full repository (full history needed for GitLeaks and Qodana)
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Java 21 for all downstream jobs
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # Cache Gradle dependencies for faster builds
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Upload backend sources for downstream jobs
      - name: Upload backend sources artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-sources
          path: backend

  # ===================================================================
  # JOB 2: Gradle build, lint, tests, coverage (core pipeline)
  # ===================================================================
  build_and_test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      # Download backend sources uploaded by setup job
      - name: Download backend sources
        uses: actions/download-artifact@v4
        with:
          name: backend-sources
          path: backend

      # Restore execute permission for Gradle wrapper (lost during artifact packaging)
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x backend/gradlew

      # Cache Gradle again for this job
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Run build + lint + tests + coverage
      - name: Build, Lint, Test, Coverage
        env:
          SPRING_PROFILES_ACTIVE: ci
        run: cd backend && ./gradlew build checkstyleMain checkstyleTest test jacocoTestReport --no-daemon --warning-mode all

      # Upload test reports (JUnit results)
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: backend/build/reports/tests/test
          if-no-files-found: warn

      # Upload JaCoCo coverage results
      - name: Upload JaCoCo coverage
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: backend/build/reports/jacoco/test/
          if-no-files-found: warn

      # Upload coverage data to Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: backend/build/reports/jacoco/test/jacocoTestReport.xml
          flags: unittests
          name: codecov-news-platform

  # ===================================================================
  # JOB 3: Security scan with GitLeaks (runs in parallel after build)
  # ===================================================================
  security:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Download backend sources
        uses: actions/download-artifact@v4
        with:
          name: backend-sources
          path: backend

      # Run GitLeaks scan
      - name: Run GitLeaks scan
        run: |
          curl -sL https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz | tar xz
          ./gitleaks detect --source . --verbose --redact

      # Upload GitLeaks report if scan fails
      - name: Upload GitLeaks results (if failed)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: .gitleaks-report.json

  # ===================================================================
  # JOB 4: Qodana static analysis (runs in parallel after build)
  # ===================================================================
  qodana:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Download backend sources
        uses: actions/download-artifact@v4
        with:
          name: backend-sources
          path: backend

      # Run Qodana scan (analyzing backend project)
      - name: Run Qodana Scan (JVM)
        uses: JetBrains/qodana-action@v2025.1
        with:
          args: --project-dir=backend --timeout=300000
          post-pr-comment: true       # comment summary to PR
          use-annotations: true       # inline annotations in PR diff
          upload-result: false        # do not push to Qodana Cloud (store artifact locally instead)
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_1954113934 }}

      # Upload complete Qodana report (HTML + JSON) as GitHub artifact
      - name: Upload Qodana report artifact
        uses: actions/upload-artifact@v4
        with:
          name: qodana-report
          path: qodana/
          if-no-files-found: warn

      # Upload SARIF results to GitHub Security dashboard
      - name: Upload Qodana SARIF report to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: qodana/results/qodana.sarif.json