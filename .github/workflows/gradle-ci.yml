name: Optimized Hybrid Java CI with Gradle, GitLeaks, SpotBugs and PMD

on:
  push:
    branches: [ "main", "develop", "master" ]
  pull_request:
    branches: [ "main", "develop", "master" ]

jobs:
  # ===================================================================
  # JOB 1: Setup (checkout + Java + Gradle cache + source upload)
  # ===================================================================
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # fetch full history (needed for GitLeaks)

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Upload backend sources artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-sources
          path: backend
          retention-days: 1    # keep minimal, full repo available in git

  # ===================================================================
  # JOB 2: Gradle build, lint, tests, coverage, static analysis
  # ===================================================================
  build_and_test:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Download backend sources
        uses: actions/download-artifact@v4
        with:
          name: backend-sources
          path: backend

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x backend/gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build, Lint, Test, Coverage
        env:
          SPRING_PROFILES_ACTIVE: ci
        run: cd backend && ./gradlew build checkstyleMain checkstyleTest test jacocoTestReport --no-daemon --warning-mode all

      - name: Static Analysis (SpotBugs + PMD)
        run: cd backend && ./gradlew spotbugsMain spotbugsTest pmdMain pmdTest --no-daemon --warning-mode all

      - name: Upload test reports
        if: always()   # ✅ always upload, even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: backend/build/reports/tests/test
          if-no-files-found: warn
          retention-days: 4

      - name: Upload JaCoCo coverage
        if: always()   # ✅ always upload coverage, even if build/tests fail
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: backend/build/reports/jacoco/test/
          if-no-files-found: warn
          retention-days: 4

      - name: Upload coverage to Codecov
        if: success()  # only upload if build/test succeeded
        uses: codecov/codecov-action@v4
        with:
          file: backend/build/reports/jacoco/test/jacocoTestReport.xml
          flags: unittests
          name: codecov-news-platform

  # ===================================================================
  # JOB 3: Security scan with GitLeaks
  # ===================================================================
  security:
    runs-on: ubuntu-latest
    needs: build_and_test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # GitLeaks requires full git history

      - name: Run GitLeaks scan
        run: |
          curl -sL https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz | tar xz
          ./gitleaks detect --source . --verbose --redact

      - name: Upload GitLeaks results
        if: failure()   # upload report only when GitLeaks fails
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: .gitleaks-report.json
          retention-days: 4
