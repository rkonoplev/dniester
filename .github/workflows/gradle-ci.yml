# Workflow for Java CI with Gradle, Qodana Cloud and GitLeaks
# This workflow runs on every push to 'main' branch and every pull request to 'main'
name: Java CI with Gradle, Qodana Cloud and GitLeaks

on:
  push:
    branches: [ "main", "develop", "master" ]
  pull_request:
    branches: [ "main" ]

# Define the job 'ci'
jobs:
  ci:
    # Run on the latest Ubuntu runner
    runs-on: ubuntu-latest
    # Set a timeout for the job (35 minutes to accommodate all steps)
    timeout-minutes: 35
    # Grant necessary permissions for the job
    permissions:
      contents: write
      pull-requests: write
      checks: write

    # Define the sequence of steps for the job
    steps:
      # Step 1: Checkout the repository code
      # 'fetch-depth: 0' is needed for Qodana and GitLeaks to analyze the full git history
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # For pull requests, check out the actual pull request commit, not the merge commit
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
          fetch-depth: 0

      # Step 2: Setup JDK 21 environment
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      # Step 3: Cache Gradle dependencies to speed up subsequent builds
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Make the Gradle wrapper executable
      - name: Grant execute permission for Gradle
        run: chmod +x backend/gradlew

      # Step 5: Run GitLeaks secret detection (early security check)
      - name: Install and Run GitLeaks scan
        run: |
          echo "Installing GitLeaks..."
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          sudo install gitleaks /usr/bin/gitleaks
          echo "GitLeaks installed successfully!"
          
          echo "Running GitLeaks secret detection..."
          gitleaks detect --source . --verbose --redact

      # Step 6: Build the project and run tests with JaCoCo coverage
      # '--no-daemon' is used to ensure the Gradle daemon stops after the build
      # '--warning-mode all' helps identify deprecated features early
      - name: Build and Run Tests with Coverage
        run: cd backend && ./gradlew build jacocoTestReport --no-daemon --warning-mode all

      # Step 7: Upload JUnit test reports as artifacts
      # This allows viewing test results even if the build fails later
      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: backend/build/reports/tests/test
          if-no-files-found: warn # Warn if no files are found, but don't fail the step

      # Step 8: Upload JaCoCo code coverage reports as artifacts
      # These can be downloaded and viewed locally
      - name: Upload JaCoCo coverage report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: backend/build/reports/jacoco/test/
          if-no-files-found: warn # Warn if no files are found, but don't fail the step

      # --- Qodana Scans ---

      # Step 9: Run Qodana analysis for the Backend (JVM) code
      # Uses Pro linter and requires QODANA_TOKEN for Qodana Cloud connection.
      # The '--project-dir' argument specifies the directory to analyze.
      - name: Qodana Backend (JVM) Scan
        uses: JetBrains/qodana-action@v2025.1
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN_1954113934 }} # Ensure this secret exists and holds the correct Project Token from Qodana Cloud
        with:
          # Use 'args' to pass command-line arguments to the qodana CLI, like '--project-dir'
          args: --project-dir,backend
          # Use supported parameters for GitHub integration
          post-pr-comment: true # Post a comment on the Pull Request with results
          use-annotations: true # Add annotations to the code in the PR
          upload-result: true   # Upload the full analysis results to Qodana Cloud

      # Step 10: Optional - Upload GitLeaks results as artifact (only on failure)
      - name: Upload GitLeaks scan results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-results
          path: .gitleaks-report.json