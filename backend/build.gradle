plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'pmd'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

ext {
    mysqlVersion = '8.3.0'
    h2Version = '2.2.224'
    bucket4jVersion = '8.7.0'
    mapStructVersion = '1.5.5.Final'
    testcontainersVersion = '1.19.7'
}

repositories {
    mavenCentral()
}

// Define a separate source set for integration tests
sourceSets {
    integrationTest {
        java.srcDir file('src/test/java/com/example/phoebe/integration')
        resources.srcDir file('src/test/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output
    }
    test {
        java.srcDir file('src/test/java/com/example/phoebe/unit')
    }
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-mysql'

    runtimeOnly "com.mysql:mysql-connector-j:${mysqlVersion}"
    runtimeOnly "com.h2database:h2:${h2Version}"

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Core test dependencies available for all tests
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "com.h2database:h2:${h2Version}"
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:mysql:${testcontainersVersion}"

    // Dependencies for integration tests
    integrationTestImplementation sourceSets.test.compileClasspath
    integrationTestRuntimeOnly sourceSets.test.runtimeClasspath

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
    implementation 'com.bucket4j:bucket4j-core:8.7.0'
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
    implementation 'org.springframework.boot:spring-boot-starter-cache'

    implementation "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
}

checkstyle {
    toolVersion = '10.12.1'
    configFile = file("${project.projectDir}/config/checkstyle/checkstyle.xml")
    maxWarnings = 0
    maxErrors = 0
}

tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

jacoco {
    toolVersion = "0.8.11"
}

tasks.jacocoTestReport {
    dependsOn test
    reports {
        xml.required.set(true)
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
        html.required.set(true)
    }
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0
            }
        }
    }
}

tasks.check.dependsOn tasks.jacocoTestCoverageVerification

pmd {
    toolVersion = "6.55.0"
    ignoreFailures = false
    consoleOutput = true
    ruleSets = []
    ruleSetFiles = files("${project.projectDir}/config/pmd/ruleset.xml")
}

tasks.withType(Pmd).configureEach {
    reports {
        xml.required = true
        html.required = true
    }
}

// Configure the standard 'test' task to run only unit tests
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
    finalizedBy jacocoTestReport
}

// Create a new task for integration tests
task integrationTest(type: Test) {
    group = 'verification'
    description = 'Runs integration tests.'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        showExceptions = true
        showCauses = true
        showStackTraces = true
    }
}

// Ensure integration tests run during the 'check' phase
tasks.check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.check.dependsOn 'checkstyleMain', 'pmdMain', 'checkstyleTest', 'pmdTest'
