plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

// Configure Java toolchain for JDK 21
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

// Dependency versions (extracted for maintainability)
ext {
    mysqlVersion = '8.3.0'
    h2Version = '2.2.224'
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Databases
    runtimeOnly "com.mysql:mysql-connector-j:${mysqlVersion}"  // MySQL driver (runtime only)
    testImplementation "com.h2database:h2:${h2Version}"        // H2 for tests

    // Development Tools (optional)
    developmentOnly 'org.springframework.boot:spring-boot-devtools'  // Hot-reload for local development

    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

// Checkstyle configuration
checkstyle {
    toolVersion = '10.12.1'
    configFile = file("${project.projectDir}/config/checkstyle/checkstyle.xml")
    maxWarnings = 0
    maxErrors = 0
}

// Generate Checkstyle reports (XML for CI, HTML for local)
tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = true  // Required for CI tools (e.g., GitHub Actions)
        html.required = true // Human-readable report
    }
}

// JaCoCo configuration for code coverage
jacoco {
    toolVersion = "0.8.11"
}

tasks.jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")  // Explicit path for Codecov
        html.required = true
        csv.required = false
    }
}

// Coverage verification (disabled by setting minimum = 0.0)
tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0  // Adjust to enforce coverage (e.g., 0.8 for 80%)
            }
        }
    }
}

// Ensure coverage is checked during 'gradle check'
tasks.check.dependsOn tasks.jacocoTestCoverageVerification

test {
    useJUnitPlatform()
}