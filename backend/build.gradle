plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'org.springframework.boot' version '3.2.0'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot Starter for building RESTful web applications
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // Spring Boot Starter for JPA & Hibernate ORM support
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // Spring Boot Starter for Spring Security (authentication, authorization)
    implementation 'org.springframework.boot:spring-boot-starter-security'
    // Spring Boot Starter for Bean Validation (Jakarta Validation API)
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // âœ… MySQL driver should only be required at runtime
    runtimeOnly 'com.mysql:mysql-connector-j:8.3.0'

    // ðŸ§ª Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // Embedded DB for tests (H2 in MySQL compatibility mode)
    testImplementation 'com.h2database:h2'
}

// Configure Checkstyle (static code analysis rules)
checkstyle {
    toolVersion = '10.12.1'
    configFile = file("${project.projectDir}/config/checkstyle/checkstyle.xml")
    maxWarnings = 0
    maxErrors = 0
}

// Generate Checkstyle reports
tasks.withType(Checkstyle).configureEach {
    reports {
        xml.required = false
        html.required = true
    }
}

// Configure JaCoCo for code coverage reporting
jacoco {
    toolVersion = "0.8.11"
}

tasks.jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

// Configure coverage verification rules
tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.0  // Adjust minimum coverage requirement if needed
            }
        }
    }
}

// Enforce coverage check during "gradle check"
tasks.check.dependsOn tasks.jacocoTestCoverageVerification

test {
    useJUnitPlatform()
}