package com.example.newsplatform.mapper;

import com.example.newsplatform.dto.request.TermCreateRequestDto;
import com.example.newsplatform.dto.request.TermUpdateRequestDto;
import com.example.newsplatform.dto.response.TermDto;
import com.example.newsplatform.entity.Term;
import org.mapstruct.BeanMapping;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.MappingConstants;
import org.mapstruct.MappingTarget;
import org.mapstruct.NullValuePropertyMappingStrategy;

/**
 * Mapper for converting between Term entity and its DTOs using MapStruct.
 * Handles creation, updates, and response mapping.
 */
@Mapper(componentModel = MappingConstants.ComponentModel.SPRING)
public interface TermMapper {

    /**
     * Maps a Term entity to a TermDto for API responses.
     *
     * @param term The source Term entity.
     * @return The mapped TermDto.
     */
    TermDto toDto(Term term);

    /**
     * Maps a TermCreateRequestDto to a new Term entity.
     * Ignores the 'id' field as it will be generated by the database.
     *
     * @param request The DTO containing data for the new term.
     * @return A new Term entity, ready to be persisted.
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "newsArticles", ignore = true)
    Term fromCreateRequest(TermCreateRequestDto request);

    /**
     * Updates an existing Term entity from a TermUpdateRequestDto.
     * Ignores null properties in the request DTO, allowing for partial updates (PATCH).
     * The 'id' and relationships are never updated from a DTO.
     *
     * @param entity  The Term entity to be updated (loaded from the database).
     * @param request The DTO containing the fields to update.
     */
    @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "newsArticles", ignore = true)
    void updateEntity(@MappingTarget Term entity, TermUpdateRequestDto request);
}