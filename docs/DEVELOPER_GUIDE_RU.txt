## 📄 `DEVELOPER_GUIDE_RU.txt`

```txt
Чек-лист разработчика – локальная работа и CI/CD

Этот файл описывает, как удобно работать над проектом на локальной машине
(IntelliJ IDEA, Gradle, Docker) и что будет автоматически выполняться в GitHub Actions (CI/CD).

------------------------------------
🔹 Ежедневная работа локально
------------------------------------
- Docker и базы данных НЕ нужно держать включёнными постоянно.
- Достаточно писать код и запускать юнит-тесты.
- Основные действия в IDEA:
  • Build Project (Ctrl+F9) для проверки сборки.
  • Запуск юнит-тестов:
    - через IDEA на классе/методе,
    - или командой: ./gradlew test
  • По желанию: прогнать линтеры локально:
    ./gradlew checkstyleMain checkstyleTest

Если нужно протестировать полное приложение:
- Запусти Docker (например, контейнеры с БД).
- Подними сервис:
  ./gradlew bootRun
- После проверки можно остановить Docker, чтобы не грузить ноутбук.

------------------------------------
🔹 Перед пушем на GitHub
------------------------------------
Минимум проверки перед пушем:
- Код компилируется (Build Project или ./gradlew build)
- Все тесты проходят (./gradlew test)
- Проверка стиля — опционально, но желательно (./gradlew checkstyleMain checkstyleTest)

------------------------------------
🔹 Что делает CI/CD (на GitHub Actions)
------------------------------------
После пуша будут автоматически выполнены:
- Полная Gradle сборка + юнит-тесты.
- Статический анализ кода: Checkstyle и PMD.
- Отчёт о покрытии тестов (JaCoCo) + загрузка в Codecov.
- GitLeaks поиск секретов.
- Интеграция с GitHub Security (Code scanning alerts).

------------------------------------
🔹 Итог
------------------------------------
- Docker при обычной разработке держать не нужно.
- Локально запускай только build/test.
- Весь «тяжёлый» анализ (Checkstyle, PMD, Coverage, GitLeaks) будет в CI.

------------------------------------
🔹 ШПАРГАЛКА ПО РАБОТЕ С MYSQL В КОНТЕЙНЕРЕ
------------------------------------

Подключение в интерактивный режим:
docker exec -it news-mysql mysql -uroot -proot

Внутри MySQL (появляется mysql>):

Посмотреть все базы: SHOW DATABASES;
Переключиться в базу: USE dniester;
Посмотреть таблицы: SHOW TABLES;
Пример: посчитать записи: SELECT COUNT(*) FROM content;
Выйти: EXIT;
Экспорт (дамп БД):

Дамп всей базы dniester:
docker exec -i news-mysql mysqldump -uroot -proot dniester > db_data/exported_dump.sql

Дамп конкретной таблицы (например users):
docker exec -i news-mysql mysqldump -uroot -proot dniester users > db_data/users_dump.sql

Импорт (залить дамп обратно):
docker exec -i news-mysql mysql -uroot -proot dniester < db_data/exported_dump.sql

Примечания:

В команде указывай имя базы (например dniester).
Перед импортом база должна существовать.
Дамп — это обычный .sql файл, его можно хранить в папке db_data для удобства.
